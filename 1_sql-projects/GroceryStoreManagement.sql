-- Grocery Store Management
DROP DATABASE IF EXISTS Grocery_Store_DB;

CREATE DATABASE Grocery_Store_DB;

USE Grocery_Store_DB;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

SELECT * FROM products;

SELECT cat_name, group_concat(prod_name) AS product_names
FROM categories c JOIN products p ON c.cat_id = p.cat_id
GROUP BY cat_name;


-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.

-- How many unique customers have placed orders?

SELECT COUNT(DISTINCT cust_id) AS unique_customers
FROM orders;


-- Which customers have placed the highest number of orders?

SELECT c.cust_name, COUNT(ord_id) AS order_count
FROM customers c 
JOIN orders o ON c.cust_id = o.cust_id
GROUP BY c.cust_name
ORDER BY order_count DESC
LIMIT 5;

-- What is the total and average purchase value per customer?

SELECT 
    c.cust_name,
    SUM(od.total_price) AS total_purchase_value,
    AVG(od.total_price) AS avg_purchase_value
FROM
    customers c
        JOIN
    orders o ON c.cust_id = o.cust_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_name
ORDER BY total_purchase_value DESC;

-- Who are the top 5 customers by total purchase amount?

SELECT 
    c.cust_name, SUM(od.total_price) AS total_spent
FROM
    customers c
        JOIN
    orders o ON c.cust_id = o.cust_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY c.cust_name
ORDER BY total_spent DESC
LIMIT 5;


-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.

-- How many products exist in each category?

SELECT 
    c.cat_name, COUNT(*) AS products_count
FROM
    products p
        JOIN
    categories c ON p.cat_id = c.cat_id
GROUP BY c.cat_name;

-- What is the average price of products by category?

SELECT c.cat_name, AVG(p.price) AS avg_price
FROM categories c
JOIN products p ON c.cat_id = p.cat_id
GROUP BY c.cat_name;

-- Which products have the highest total sales volume (by quantity)? # Best sellers

SELECT prod_name, SUM(quantity) As total_quantity_sold  
FROM products p 
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY prod_name
ORDER BY total_quantity_sold DESC
LIMIT 5;

-- What is the total revenue generated by each product?

SELECT prod_name, SUM(total_price) AS total_revenue
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY prod_name
ORDER BY total_revenue DESC;

-- How do product sales vary by category and supplier?
    
SELECT 
    p.cat_id, p.sup_id, SUM(od.total_price) AS total_revenue
FROM
    order_details od
        JOIN
    products p ON od.prod_id = p.prod_id
GROUP BY p.cat_id , p.sup_id;

-- 3. Sales and Order Trends
-- How many orders have been placed in total?

SELECT COUNT(*) AS total_orders FROM orders;


-- What is the average value per order?

  SELECT ord_id, AVG(total_price) AS order_total
  FROM order_details
  GROUP BY ord_id;

-- On which dates were the most orders placed?

SELECT order_date, COUNT(*) AS order_count
FROM orders
GROUP BY order_date
ORDER BY order_count DESC;

-- What are the monthly trends in order volume and revenue?

SELECT 
    LEFT(order_date, 2) AS month,  -- Extracts 'YYYY-MM'
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY month
ORDER BY month;

SELECT 
  MONTH(STR_TO_DATE(order_date, '%m/%d/%Y')) AS month,
  COUNT(DISTINCT o.ord_id) AS total_orders,
  SUM(od.total_price) AS total_revenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY month
ORDER BY month;

-- How do order patterns vary across weekdays and weekends?

SELECT 
    CASE
        WHEN WEEKDAY(STR_TO_DATE(order_date, '%m/%d/%Y')) < 5 THEN 'Weekday'
        ELSE 'Weekend'
    END AS Week_cat,
    COUNT(ord_id) AS Total_orders
FROM
    orders
GROUP BY Week_cat;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
-- How many suppliers are there in the database?

SELECT COUNT(*) AS Total_Suppliers FROM supplier;

-- Which supplier provides the most products?

SELECT sup_name, COUNT(prod_id) AS total_products FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY sup_name
ORDER BY total_products DESC
LIMIT 1;

-- What is the average price of products from each supplier?

SELECT sup_name, AVG(price) AS average_cost FROM products p
JOIN supplier s ON p.sup_id = s.sup_id
GROUP BY sup_name
ORDER BY average_cost;

-- Which suppliers contribute the most to total product sales (by revenue)?

SELECT 
    sup_name, SUM(total_price) AS total_revenue
FROM
    supplier s
        JOIN
    products p ON s.sup_id = p.sup_id
        JOIN
    order_details od ON p.prod_id = od.prod_id
GROUP BY sup_name
ORDER BY total_revenue DESC;

-- 5️. Employee Performance
-- How many employees have processed orders?

SELECT 
    COUNT(DISTINCT emp_id) AS employees_processed_orders
FROM
    orders;
    
-- Which employees have handled the most orders?

SELECT 
    e.emp_name, COUNT(o.ord_id) AS employees_handled_ordes
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_name
ORDER BY employees_handled_ordes DESC;

-- What is the total sales value processed by each employee?

SELECT 
    e.emp_name, SUM(od.total_price) AS total_sales_value
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_name
ORDER BY total_sales_value DESC;

-- What is the average order value handled per employee?

SELECT 
    e.emp_name,
    SUM(od.total_price) / COUNT(DISTINCT o.ord_id) AS Avg_order_value
FROM
    employees e
        JOIN
    orders o ON e.emp_id = o.emp_id
        JOIN
    order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_name
ORDER BY Avg_order_value DESC;

-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.

-- What is the relationship between quantity ordered and total price?

SELECT quantity, SUM(total_price) AS total_price
FROM order_details
GROUP BY quantity
ORDER BY total_price DESC;

-- What is the average quantity ordered per product?

SELECT prod_name, AVG(quantity) AS avg_quantity
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY prod_name
ORDER BY avg_quantity DESC;

-- How does the unit price vary across products and orders?

SELECT 
    p.prod_name,
    od.each_price AS unit_price,
    COUNT(od.ord_id) AS total_orders
FROM order_details od
JOIN products p ON od.prod_id = p.prod_id
GROUP BY p.prod_name, od.each_price
ORDER BY total_orders DESC;
